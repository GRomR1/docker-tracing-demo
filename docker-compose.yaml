services:

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  # init:
  #   image: grafana/tempo:latest
  #   user: root
  #   entrypoint:
  #     - "chown"
  #     - "10001:10001"
  #     - "/var/tempo"
  #   volumes:
  #     - ./data/tempo:/var/tempo

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./etc/tempo/tempo.yaml:/etc/tempo.yaml
      # - ./data/tempo:/var/tempo
    # ports:
      # - "3200:3200"     # tempo
      # - "9095:9095"     # tempo grpc
      # - "4317:4317"     # otlp grpc
      # - "4318:4318"     # otlp http
    # depends_on:
    #   - init

  # # Generate fake traces...
  # k6-gen:
  #   image: ghcr.io/grafana/xk6-client-tracing:latest # tested on v0.0.5
  #   environment:
  #     - ENDPOINT=otel-collector:4317
  #   depends_on:
  #     - otel-collector

  # # Generate fake traces (simplest one)...
  # telemetry-gen:
  #   image: ghcr.io/open-telemetry/opentelemetry-collector-contrib/telemetrygen:latest
  #   command:
  #     - traces
  #     - --otlp-insecure
  #     - --otlp-endpoint=jaeger:4317
  #     - --duration=30s
  #     - --workers=4
  #     - --rate=4
  #   depends_on:
  #     - jaeger

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    volumes:
      - ./etc/jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
    command:
      - --query.ui-config=/etc/jaeger/jaeger-ui.json
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_OTLP_GRPC_HOST_PORT=:4317
      - COLLECTOR_OTLP_HTTP_HOST_PORT=:4318
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - LOG_LEVEL=debug
    ports:
      - "16686:16686"  # Jaeger UI accessed by http://localhost:16686
      # - "14269:14269"  # health check at / and metrics at /metrics
      # - "4317:4317"    # OTLP gRPC receiver

  # And put them in an OTEL collector pipeline...
  otel-collector:
    # image: otel/opentelemetry-collector-contrib:latest  # tested on 0.104.0
    image: otel/opentelemetry-collector:latest # tested on 0.104.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./etc/otel-collector/config.yaml:/etc/otel-collector.yaml
    ports:
      # - "1888:1888"   # pprof extension
      # - "8888:8888"   # Prometheus metrics exposed by the collector
      # - "8889:8889"   # Prometheus exporter metrics
      # - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      # - "55679:55679" # zpages extension
    depends_on:
      - tempo
      - jaeger

  loki:
    image: grafana/loki:3.1.0 # tested on 3.1.0
    command: ["--pattern-ingester.enabled=true", "--config.file=/etc/loki/loki.yaml"]
    ports:
      - "3100:3100"
    volumes:
      - "./etc/loki/loki.yaml:/etc/loki/loki.yaml"

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ./etc/prometheus/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest # tested on 11.1.0
    volumes:
      - ./etc/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./etc/grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./etc/grafana/plugins.yaml:/etc/grafana/provisioning/plugins/plugins.yaml
      - ./etc/dashboards:/etc/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary traceToMetrics traceqlSearch
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    ports:
      - "3000:3000"
    depends_on:
      - tempo
      - loki


  fastapi-app:
    image: fastapi_app
    build:
      context: ./fastapi_app
    environment:
      - OTLP_GRPC_ENDPOINT=http://otel-collector:4317
      - DATABASE_URL=postgresql://user:password@postgres-db:5432/db
    command:
      - 'python3'
      # - 'simple_2_logs_and_traces.py'
      # - 'simple_3_metrics.py'
      # - 'simple_4_set_new_span_with_attr.py'
      - 'simple_5_db.py'
    ports:
      - "8000:8000"
    depends_on:
      - otel-collector
      - postgres-db

  flask-app:
    image: flask_app
    build:
      context: ./flask_app
    environment:
      - FASTAPI_URL=http://fastapi-app:8000
      - OTEL_SERVICE_NAME=flask-app
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
      - OTEL_PYTHON_LOG_CORRELATION=true

      - OTEL_EXPORTER_PROMETHEUS_HOST=0.0.0.0
      - OTEL_EXPORTER_PROMETHEUS_PORT=9464

      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp,prometheus
      - OTEL_LOGS_EXPORTER=otlp

      # - OTEL_TRACES_EXPORTER=console
      # - OTEL_METRICS_EXPORTER=none
      # - OTEL_LOGS_EXPORTER=none
    command:
      - 'opentelemetry-instrument'
      - 'python3'
      - 'app_client.py'
    ports:
      - "8001:8001"
      - "9464:9464"
    depends_on:
      - otel-collector

  postgres-db:
    image: postgres:16-alpine
    volumes:
      # - ./data/postgres/:/var/lib/postgresql/data/
      - ./etc/postgres/:/docker-entrypoint-initdb.d/
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=db
    ports:
      - "5432:5432"
